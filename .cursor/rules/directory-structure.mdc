---
description: 
globs: **/*.ts, **/*.tsx, **/package.json, **/drizzle.config.ts
alwaysApply: false
---
---
description: "Directory structure and file organization guidelines for TanStack Start + tRPC + Drizzle project"
globs: [**/*.ts, **/*.tsx, **/package.json, **/drizzle.config.ts]
alwaysApply: false
---

# Supabase Backup Tool Directory Structure Guidelines

## Optimized Directory Structure (Best of Both Approaches)

```
project-root/
├── .env                          # Environment variables
├── .env.example                  # Example environment file
├── .gitignore
├── .vscode/
│   └── settings.json
├── app.config.js                 # TanStack Start configuration
├── components.json               # shadcn/ui configuration
├── drizzle.config.ts            # Drizzle Kit configuration
├── index.html
├── package.json
├── pnpm-lock.yaml
├── pnpm-workspace.yaml
├── postcss.config.mjs
├── tailwind.config.mjs          # TailwindCSS configuration
├── tsconfig.json
├── tsconfig.dev.json
├── trpc-server.handler.ts
├── README.md
│
├── drizzle/                     # Generated by Drizzle Kit
│   ├── migrations/              # Database migrations
│   ├── meta/                    # Migration metadata
│   └── schema.sql
│
├── data/                        # Backup storage (gitignored)
│   ├── backups/                 # Organized backup files
│   │   └── {project-name}/      # Per-project directories
│   ├── logs/                    # Operation logs
│   └── supabase-backup.db       # Local SQLite database
│
├── projectDocs/                 # Documentation
│   └── *.md
│
└── src/
    ├── main.tsx                 # App entry point
    ├── router.tsx               # Router configuration
    ├── routeTree.gen.ts         # Generated by TanStack Router
    ├── styles.css               # Global styles
    │
    ├── providers/               # ⭐ Context Providers & App Setup
    │   ├── index.tsx            # Root provider that wraps all others
    │   ├── theme.provider.tsx   # Theme context provider
    │   ├── trpc.provider.tsx    # tRPC + TanStack Query provider
    │   ├── auth.provider.tsx    # Authentication provider (if needed)
    │   └── toast.provider.tsx   # Toast/notification provider
    │
    ├── lib/                     # Core utilities and configurations
    │   ├── db/                  # ⭐ Database Layer (SINGLE SOURCE OF TRUTH)
    │   │   ├── index.ts         # Re-export schemas, types, validations
    │   │   ├── client.ts        # Database connection
    │   │   ├── projects.schema.ts     # Projects table schema
    │   │   ├── projects.types.ts      # Project types (inferred)
    │   │   ├── projects.validations.ts # Zod schemas for projects
    │   │   ├── backups.schema.ts      # Backups table schema
    │   │   ├── backups.types.ts       # Backup types (inferred)
    │   │   ├── backups.validations.ts # Zod schemas for backups
    │   │   ├── jobs.schema.ts         # Backup jobs table schema
    │   │   ├── jobs.types.ts          # Job types (inferred)
    │   │   ├── jobs.validations.ts    # Zod schemas for jobs
    │   │   └── seed.ts                # Database seeding
    │   │
    │   ├── trpc/                # tRPC setup (existing)
    │   │   ├── init.ts          # tRPC initialization
    │   │   ├── query-client.ts  # TanStack Query client
    │   │   ├── context.ts       # tRPC context
    │   │   └── routers/
    │   │       ├── index.ts     # Root router
    │   │       ├── projects.router.ts   # Project operations
    │   │       ├── backups.router.ts    # Backup operations
    │   │       ├── jobs.router.ts       # Job operations
    │   │       ├── analytics.router.ts  # Analytics/metrics
    │   │       └── settings.router.ts   # App settings
    │   │
    │   ├── services/            # Business logic & external APIs
    │   │   ├── backup.service.ts        # Core backup operations
    │   │   ├── supabase.service.ts      # Supabase CLI operations
    │   │   ├── encryption.service.ts    # Credential encryption
    │   │   ├── scheduler.service.ts     # Job scheduling
    │   │   └── file.service.ts          # File operations
    │   │
    │   ├── types/               # Global types
    │   │   ├── index.ts
    │   │   ├── api.types.ts     # API-specific types
    │   │   ├── backup.types.ts  # Backup operation types
    │   │   ├── supabase.types.ts # Supabase-specific types
    │   │   └── global.types.ts  # Global app types
    │   │
    │   └── utils/               # Utility functions
    │       ├── index.ts         # shadcn/ui utils
    │       ├── file-manager.ts  # (existing)
    │       ├── supabase-cli.ts  # (existing)
    │       ├── backup-paths.ts  # Backup file paths
    │       ├── cli-commands.ts  # CLI command wrappers
    │       ├── encryption.ts    # Encryption utilities
    │       ├── validation.utils.ts # Validation helpers
    │       └── date.utils.ts    # Date formatting utilities
    │
    ├── components/              # ⭐ UI Components Only
    │   ├── ui/                  # shadcn/ui components (keep as-is)
    │   │   ├── button.tsx
    │   │   ├── card.tsx
    │   │   ├── table.tsx
    │   │   └── ... (all existing UI components)
    │   ├── app-sidebar.tsx      # Keep existing layout components
    │   ├── mode-toggle.tsx
    │   ├── nav-main.tsx
    │   ├── nav-projects.tsx
    │   ├── nav-user.tsx
    │   ├── team-switcher.tsx
    │   ├── backup.components.tsx    # ⭐ Backup-related UI components
    │   ├── project.components.tsx   # ⭐ Project-related UI components
    │   ├── analytics.components.tsx # ⭐ Analytics/charts components
    │   ├── form.components.tsx      # ⭐ Reusable form components
    │   └── table.components.tsx     # ⭐ Data table components
    │
    ├── hooks/                   # Custom React hooks
    │   ├── use-mobile.ts        # (existing)
    │   ├── projects.hooks.ts    # ⭐ Project-related hooks
    │   ├── backups.hooks.ts     # ⭐ Backup-related hooks
    │   ├── jobs.hooks.ts        # ⭐ Job-related hooks
    │   ├── auth.hooks.ts        # Authentication hooks (if needed)
    │   └── storage.hooks.ts     # Local storage hooks
    │
    └── routes/                  # TanStack Router (file-based routing)
        ├── __root.tsx           # Root layout (existing)
        ├── -components/         # Route-specific components
        │   └── spinner.tsx
        ├── index.tsx            # Home page (existing)
        ├── dashboard.tsx        # Dashboard layout (existing)
        ├── dashboard.index.tsx  # Dashboard home (existing)
        ├── dashboard.projects.tsx        # Projects layout (existing)
        ├── dashboard.projects.index.tsx  # Projects list (existing)
        ├── dashboard.projects.new.tsx    # New project (existing)
        ├── dashboard.projects.$id.tsx    # Project details
        ├── dashboard.backups.tsx         # Backups layout
        ├── dashboard.backups.index.tsx   # Backups list
        ├── dashboard.backups.$id.tsx     # Backup details
        ├── dashboard.jobs.tsx            # Jobs layout
        ├── dashboard.jobs.index.tsx      # Jobs list
        ├── dashboard.jobs.new.tsx        # Create job
        ├── dashboard.jobs.$id.tsx        # Job details
        └── dashboard.settings.tsx        # Settings page
```

## Provider Organization Pattern

### Root Provider Setup
```ts
// src/providers/index.tsx
import { ThemeProvider } from './theme.provider';
import { TRPCProvider } from './trpc.provider';
import { ToastProvider } from './toast.provider';

export function AppProviders({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider>
      <TRPCProvider>
        <ToastProvider>
          {children}
        </ToastProvider>
      </TRPCProvider>
    </ThemeProvider>
  );
}
```

### Individual Providers
```ts
// src/providers/theme.provider.tsx
export function ThemeProvider({ children }: { children: React.ReactNode }) {
  // Theme logic here
  return <ThemeContext.Provider value={...}>{children}</ThemeContext.Provider>;
}

// src/providers/trpc.provider.tsx
export function TRPCProvider({ children }: { children: React.ReactNode }) {
  // tRPC + TanStack Query setup
  return (
    <QueryClientProvider client={queryClient}>
      <trpc.Provider client={trpcClient} queryClient={queryClient}>
        {children}
      </trpc.Provider>
    </QueryClientProvider>
  );
}
```

## Database Layer Pattern (Single Source of Truth)

### 1. Schema Definition (Primary Source)
```ts
// src/lib/db/projects.schema.ts
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';

export const projects = sqliteTable('projects', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  supabaseUrl: text('supabase_url').notNull(),
  // ... other fields
});

export const projectsRelations = relations(projects, ({ many }) => ({
  backups: many(backups),
}));
```

### 2. Inferred Types (Secondary)
```ts
// src/lib/db/projects.types.ts
import type { InferSelectModel, InferInsertModel } from 'drizzle-orm';
import { projects } from './projects.schema';

export type Project = InferSelectModel<typeof projects>;
export type NewProject = InferInsertModel<typeof projects>;
```

### 3. Validation Schemas (Derived)
```ts
// src/lib/db/projects.validations.ts
import { createSelectSchema, createInsertSchema } from 'drizzle-zod';
import { projects } from './projects.schema';

export const createProjectSchema = createInsertSchema(projects, {
  name: (schema) => schema.min(1).max(100),
  supabaseUrl: (schema) => schema.url(),
});

export const updateProjectSchema = createSelectSchema(projects).partial().pick({
  name: true,
  supabaseUrl: true,
});
```

### 4. Centralized Exports
```ts
// src/lib/db/index.ts
// Schemas
export * from './projects.schema';
export * from './backups.schema';
export * from './jobs.schema';

// Types
export * from './projects.types';
export * from './backups.types';
export * from './jobs.types';

// Validations
export * from './projects.validations';
export * from './backups.validations';
export * from './jobs.validations';

// Client
export { db } from './client';
```

## Component Organization Pattern

```ts
// src/components/project.components.tsx
export function ProjectCard({ project }: { project: Project }) { ... }
export function ProjectForm({ onSubmit }: { onSubmit: (data: NewProject) => void }) { ... }
export function ProjectList({ projects }: { projects: Project[] }) { ... }
export function ProjectStats({ project }: { project: Project }) { ... }
```

## Hooks Pattern

```ts
// src/hooks/projects.hooks.ts
export function useProjects() {
  return trpc.projects.list.useQuery();
}

export function useProject(id: string) {
  return trpc.projects.getById.useQuery({ id });
}

export function useCreateProject() {
  return trpc.projects.create.useMutation();
}
```

## tRPC Router Pattern

```ts
// src/lib/trpc/routers/projects.router.ts
export const projectsRouter = router({
  list: publicProcedure.query(async () => {
    return await db.select().from(projects);
  }),
  
  create: publicProcedure
    .input(createProjectSchema)
    .mutation(async ({ input }) => {
      return await db.insert(projects).values(input);
    }),
    
  update: publicProcedure
    .input(updateProjectSchema)
    .mutation(async ({ input }) => {
      const { id, ...data } = input;
      return await db.update(projects).set(data).where(eq(projects.id, id));
    }),
});
```

## File Naming Rules

### Domain-Based Extensions
- **Schemas**: `*.schema.ts` - Database table definitions
- **Types**: `*.types.ts` - TypeScript type definitions
- **Validations**: `*.validations.ts` - Zod validation schemas
- **Routers**: `*.router.ts` - tRPC route definitions
- **Services**: `*.service.ts` - Business logic classes
- **Hooks**: `*.hooks.ts` - Custom React hooks
- **Components**: `*.components.tsx` - Related UI components
- **Utils**: `*.utils.ts` - Utility functions

### General Naming
- Use `kebab-case` for files: `backup-status.tsx`
- Use `PascalCase` for React components: `BackupStatus`
- Use `camelCase` for functions and variables
- Use descriptive domain prefixes: `projects.`, `backups.`, `jobs.`

## Import Organization

### Preferred Import Pattern
```ts
// Single source of truth imports
import { 
  type Project, 
  type NewProject, 
  createProjectSchema,
  projects 
} from '@/lib/db';

// Component imports
import { ProjectCard } from '@/components/project.components';

// Hook imports
import { useProjects } from '@/hooks/projects.hooks';

// Service imports
import { BackupService } from '@/lib/services/backup.service';
```

## Domain-Based Naming Convention

### Files
- **Schemas**: `{domain}.schema.ts` (e.g., `projects.schema.ts`)
- **Types**: `{domain}.types.ts` (e.g., `projects.types.ts`)
- **Validations**: `{domain}.validations.ts` (e.g., `projects.validations.ts`)
- **Routers**: `{domain}.router.ts` (e.g., `projects.router.ts`)
- **Services**: `{domain}.service.ts` (e.g., `backup.service.ts`)
- **Components**: `{domain}.components.tsx` (e.g., `project.components.tsx`)
- **Hooks**: `{domain}.hooks.ts` (e.g., `projects.hooks.ts`)
- **Utils**: `{domain}.utils.ts` (e.g., `backup.utils.ts`)

### Legacy Naming (Still Supported)
- **Forms**: `{domain}.form.tsx` (e.g., `project.form.tsx`)
- **Cards**: `{domain}.card.tsx` (e.g., `project.card.tsx`)
- **Tables**: `{domain}.table.tsx` (e.g., `projects.table.tsx`)
- **Individual Hooks**: `use-{domain}.ts` (e.g., `use-project.ts`)

## Key Principles

1. **Domain-Based Organization**: Group related functionality by domain (projects, backups, jobs)
2. **Flat Structure**: Avoid deep nesting - keep it simple and navigable
3. **Clear Naming**: Use descriptive, consistent naming patterns
4. **Separation of Concerns**: Database, API, UI, and utilities are clearly separated
5. **Build on Existing**: Enhance current structure without major restructuring
6. **Provider Organization**: Clean separation of concerns for app setup
7. **Single Source of Truth**: All types flow from Drizzle schemas
8. **Type-Safe Validation Chain**: Schema → Types → Validations → UI

